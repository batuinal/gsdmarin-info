===== Assumptions =====

--> Each Table is Exactly Two-Dimensional
* Each row in a table is an "entity" that has it's unique ID.
* Each "entity" has one or more "attribute" (correspond to columns in actual database).
* There will never be a 3rd Dimension. 

--> Each Table is a Perfect Rectangle 
* Each entity has exactly the same attributes. 
* There is a default "invalid" value to represent empty cells.
  - WE NEED TO DECIDE ON A DEFAULT INVALID VALUE!!

--> One Connection Per Function
* Each function conects to the database before doing its task.
* Each function disconnects from the database once it's done.
* Each function must be thread-safe (able to work in parallel).

--> No Database Code Elsewhere
* We only touch the database through the functions defined below.
* There should be absolutely no SQL code anywhere else.
* No additional database functionaliy is needed for this project.

===== Functions =====

*** Table Functions ***

--> CreateTable(name) // Column'lari sonradan ekleriz.
// Create table with given name.
// Return: 1 on success, 0 on failure.

--> PrintTable(name)
// Generate a list of all entity IDs and their corresponding dictionaries.
// Return: A dictionary of (ID) --> (Attribute --> Value)

--> RemoveTable(name)               
// Remove table with given name.
// Return: 1 on success, 0 on failure.

*** Entity Functions ***

--> ListEntities(table)
// Return: A list of all entity IDs in the "table".

--> AddEntity(table)
// Add new entity to the given table.
// Return: ID of new entity on success, 0 on failure.

--> AddEntity(table, dict)
// Add "entity" to the given table.
// Immediately fill the columns based on the given "dict" dictionary.
// Return: ID of new entity on success, 0 on failure. 

--> RemoveEntity(table, id)
// Remove entity with given ID from the given table.
// Return: 1 on success, 0 on failure.

*** Attribute Functions ***

--> ListAttributes(table)
// List all attribute names under the given "table".

--> AddAttribute(table, attribute, type)
// Add an "attribute" of type "type" to given "table".
// Default value should be the "invalid" value. (We need to decide what that is)
// Return: 1 on success, 0 on failure.

--> RemoveAttribute(table, attribute)
// Remove an "attribute" from the given "table".
// Return: 1 on success, 0 on failure.

*** Value Functions ***

--> GetValue(table, id, attribute)
// In the given "table", read the value of the "attribute" of the entity with given "ID".
// Return: Value on success, the default invalid value on failure.

--> SetValue(table, id, attribute, value)                     
// In the given "table", set the "attribute" of the entity with given "ID" to "value".
// Return: 1 on success, 0 on failure.

--> SetAllAttributes(table, entity, dict)
// In the given table, set all attributes of given "entity" according to the dictionary.
// Return 1 on success, 0 on failure.

--> SetAllEntities(table, attribute, value)
// In the given table, set the "attribute" of all entities to "value".
// Return 1 on success, 0 on failure.
