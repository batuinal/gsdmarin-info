===== Assumptions =====

--> Each Table is Exactly Two-Dimensional
* Each row in a table is an "entity" that has it's unique ID.
* Each "entity" has one or more "attribute" (correspond to columns in actual database).
* There will never be a 3rd Dimension. 

--> Each Table is a Perfect Rectangle 
* Each entity has exactly the same attributes. 
* There is a default "invalid" value to represent empty cells.
  - WE NEED TO DECIDE ON A DEFAULT INVALID VALUE!!

--> One Connection Per Function
* Each function conects to the database before doing its task.
* Each function disconnects from the database once it's done.
* Each function must be thread-safe (able to work in parallel).

--> No Database Code Elsewhere
* We only touch the database through the functions defined below.
* There should be absolutely no SQL code anywhere else.
* No additional database functionaliy is needed for this project.

===== Functions =====

*** Table Functions ***

[done]--> CreateTable(name) // Column'lari sonradan ekleriz.
// Create table with given name.
// Return: 1 on success, 0 on failure.

[done/read comment in the right]--> PrintTable(name) // Bu fonksiyon ListEntities ile birebir aynı işi yapıyor. o yüzden bunu table'ın string representationunu almak için, listEntities'i de bütün entitieleri basmak için kullanalım direk
// Return: String representation of the table

[done]--> RemoveTable(name)               
// Remove table with given name.
// Return: 1 on success, 0 on failure.

*** Entity Functions ***

[done]--> ListEntities(name)
// Return: A list of all entities in the table with the corresponding name.

[done]--> AddEntity(name)
// Add new entity to a table with the given name.
// Return: ID of new entity on success, 0 on failure.

[done]--> AddEntityWithValues(name, dict) // now supports multiple additions in single function call
// Add "entity" to the table with the given name.
// Immediately fill the columns based on the given "dict" dictionary.
// Return: ID of new entity on success, 0 on failure. 

[done]--> RemoveEntity(name, id)
// Remove entity with given ID from the table with the given name.
// Return: 1 on success, 0 on failure.

*** Attribute Functions ***

--> ListAttributes(name)
// List all attribute names under the table with the given “name”.

[done]--> AddAttribute(name, attribute, type)
// Add an "attribute" of type "type" to the table with the given “name”.
// Default value should be the "invalid" value. (We need to decide what that is)
// Return: 1 on success, 0 on failure.

[done]--> RemoveAttribute(name, attribute)
// Remove an "attribute" from the table with the given “name”.
// Return: 1 on success, 0 on failure.

*** Value Functions ***

[done]--> GetValue(table, id, attribute)
// In the given "table", read the value of the "attribute" of the entity with given "ID".
// Return: Value on success, the default invalid value on failure.

[done]--> SetValue(table, id, attribute, value)                     
// In the given "table", set the "attribute" of the entity with given "ID" to "value".
// Return: 1 on success, 0 on failure.

--> SetAllAttributes(table, id, dict)
// In the given table, set all attributes of given "entity" according to the dictionary.
// Return 1 on success, 0 on failure.

--> SetAllEntities(table, attribute, value) //use case'i olmayan bir fonksiyon bu, implement etmeye gerek yok. gerekirse söyleyin hallederz
// In the given table, set the "attribute" of all entities to "value".
// Return 1 on success, 0 on failure.
